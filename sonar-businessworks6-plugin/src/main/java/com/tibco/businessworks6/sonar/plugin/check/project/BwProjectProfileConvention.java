package com.tibco.businessworks6.sonar.plugin.check.project;

import com.tibco.businessworks6.sonar.plugin.check.AbstractProjectCheck;
import com.tibco.businessworks6.sonar.plugin.data.model.BwActivity;
import com.tibco.businessworks6.sonar.plugin.data.model.BwModuleProperty;
import com.tibco.businessworks6.sonar.plugin.data.model.BwProcess;
import com.tibco.businessworks6.sonar.plugin.data.model.BwProject;
import com.tibco.businessworks6.sonar.plugin.data.model.BwSharedResource;
import com.tibco.businessworks6.sonar.plugin.data.model.BwVariable;
import com.tibco.businessworks6.sonar.plugin.data.model.BwXmlResource;
import com.tibco.businessworks6.sonar.plugin.data.model.profiles.Profile;
import com.tibco.businessworks6.sonar.plugin.data.model.profiles.ProfileManager;
import com.tibco.businessworks6.sonar.plugin.profile.ProcessSonarWayProfile;
import com.tibco.businessworks6.sonar.plugin.services.l10n.LocalizationMessages;
import com.tibco.businessworks6.sonar.plugin.source.ProjectSource;
import java.util.Collection;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.sonar.check.BelongsToProfile;
import org.sonar.check.Priority;
import org.sonar.check.Rule;
import org.sonar.check.RuleProperty;


@Rule(
        name = "Project Profile Convention",
        description = "Proejct Profile Convention",
        key = BwProjectProfileConvention.RULE_KEY,
        priority = Priority.INFO)

@BelongsToProfile(
        title = ProcessSonarWayProfile.defaultProfileName,
        priority = Priority.INFO)
public class BwProjectProfileConvention extends AbstractProjectCheck {

    public static final String RULE_KEY = "ProjectProfileConvention";
   
    private final ProfileManager profileManager = ProfileManager.getInstance();

    @RuleProperty(
            key = "profileContent",
            type = "TEXT",
            defaultValue = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
"<!--Sample XML file generated by XMLSpy v2010 (http://www.altova.com)-->\n" +
"<Profile xsi:noNamespaceSchemaLocation=\"qualityProfile.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
"    <Data>\n" +
"        <Name>DEFAULT</Name>\n" +
"        <Version>1.0</Version>\n" +
"    </Data>\n" +
"    <Elements>\n" +
"        <ModuleProperty>\n" +
"            <NamingPattern>.*</NamingPattern>\n" +
"        </ModuleProperty>\n" +
"        <Resources>\n" +
"            <LocationPattern>Resources/.*</LocationPattern>\n" +
"            <Resource>\n" +
"                <NamingPattern>.*</NamingPattern>\n" +
"                <Type>JMSConnection</Type>\n" +
"            </Resource>\n" +
"        </Resources>\n" +
"        <Process>\n" +
"            <NamingPattern>.*</NamingPattern>\n" +
"            <LocationPattern>Processes/.*</LocationPattern>\n" +
"        </Process>\n" +
"        <Descriptors>\n" +
"            <NamingPattern>.*</NamingPattern>\n" +
"            <LocationPattern>Service Descriptors/.*</LocationPattern>\n" +
"        </Descriptors>\n" +
"        <Schemas>\n" +
"            <NamingPattern>.*</NamingPattern>\n" +
"            <LocationPattern>Schemas/.*</LocationPattern>\n" +
"        </Schemas>\n" +
"    </Elements>\n" +
"</Profile>\n" +
"")
    private String profileContent;
    
    
    protected ProjectSource source;

    
    @Override
    protected void validate(ProjectSource processSource) {

        source = processSource;
        BwProject project = processSource.getResourceModel();
        LOG.debug("Started rule: " + this.getClass());
        LOG.debug("Analyzing the global variables");
        Profile profile = loadProfile();
        if (profile != null) {
            String internalProfileName = profile.getDataName();
            LOG.debug("Checking using the profile: " + internalProfileName);
            checkModuleProperty(project, profile.getModuleProperty());
            checkResources(project, profile.getResources());
            checkProcess(project, profile.getProcess());
            checkDescriptors(project, profile.getDescriptors());
            checkSchemas(project, profile.getSchemas());
        } else {
            LOG.debug("No quality profile detected");
        }
    }

    private void checkModuleProperty(BwProject project, Profile.ModuleProperty moduleProperties) {
        if (project != null && moduleProperties != null) {
            String pattern = moduleProperties.getNamingPattern();
            LOG.debug("Using module properties naming pattern: " + pattern);
            Pattern pat = Pattern.compile(pattern);
            List<BwModuleProperty> gvarList = project.getModulProperties();
            if (gvarList != null) {
                LOG.debug("Module property to analyze: " + gvarList.size());
                for (BwModuleProperty gVar : gvarList) {
                    String key = gVar.getName();
                    LOG.debug("Module property name:" + key);
                    Matcher mat = pat.matcher(key);
                    if (mat != null && !mat.matches()) {
                        LOG.warn("Module property name not matching the naming pattern: " + key);
                        addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_MODULE_PROPERTY_VARIABLE_TEXT_ISSUE) + key,source);
                    }
                }
            }
        }
    }

    private void checkResources(BwProject project, Profile.Resources resourceList) {
        if (project != null && resourceList != null) {
            List<BwSharedResource> bwResourceList = project.getSharedResourcesList();
            if (bwResourceList != null) {
                LOG.debug("Shared resource to analyze: " + bwResourceList.size());
                for (BwSharedResource resource : bwResourceList) {
                    LOG.debug("Shared resource to analyze: " + resource.getName());
                    String pattern = getPattern(resourceList, resource.getType());
                    if (pattern != null) {
                        LOG.debug("Resource Naming Pattern: "+pattern);
                        Pattern pat = Pattern.compile(pattern); 
                        Matcher m = pat.matcher(resource.getName());
                        if (m != null && !m.matches()) {
                            LOG.warn("Shared resource name not matching the naming pattern: " + resource.getName());
                            addError(1,l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_RESOURCE_TEXT_ISSUE) + pattern + "): " + resource.getName(),source);
                        }
                    }
                    String location = resourceList.getLocationPattern();
                    if (location != null) {
                        Pattern pat = Pattern.compile(location);
                        LOG.debug("Resource Location Pattern: "+location);
                         LOG.debug("Resource Full Name: "+resource.getFullName());
                        Matcher m = pat.matcher(resource.getFullName());
                        if (m != null && !m.matches()) {
                            LOG.warn("Shared resource name not matching the location pattern: " + resource.getFullName());
                            addError(1,l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_LOCATION_RESOURCE_TEXT_ISSUE) + pattern + "): " + resource.getName(),source);
                        }
                    }
                }
            }
        }
    }

    private String getPattern(Profile.Resources resourceList, String type) {
        if (resourceList != null && type != null) {
            for (Profile.Resources.Resource resource : resourceList.getResourceList()) {
                if (type.equals(resource.getType())) {
                    return resource.getNamingPattern();
                }
            }
        }
        return null;
    }

    private void checkProcess(BwProject project, Profile.Process process) {
        if (process != null) {
            String pattern = process.getNamingPattern();
            String location = process.getLocationPattern();
            if (pattern != null) {
                LOG.debug("Process Name Pattern: "+pattern);
                Pattern pt = Pattern.compile(pattern);
                List<BwProcess> processList = project.getProcess();
                if (processList != null) {
                    LOG.debug("Process list to analyze: " + processList.size());
                    for (BwProcess tmpProcess : processList) {
                        LOG.debug("Process Name: " + tmpProcess.getName());
                        Matcher mat = pt.matcher(tmpProcess.getName());
                        if (mat != null && !mat.matches()) {
                            LOG.warn("Process name not matching the naming pattern: " + tmpProcess.getName());
                            addError(1,l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_PROCESS_TEXT_ISSUE) + tmpProcess.getName(),source);
                        }
                        
                        
                        if (location != null) {
                            LOG.debug("Process Location Pattern: "+location);
                            Pattern ptLoc = Pattern.compile(location);
                            String relativePath = tmpProcess.getFullName();
                            mat = ptLoc.matcher(relativePath);
                            if (mat != null && !mat.matches()) {
                                LOG.warn("Process name not matching the location pattern: " + tmpProcess.getFullName());
                                addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_LOCATION_PROCESS_TEXT_ISSUE) + tmpProcess.getFullName(),source);
                            }
                        }

                        checkActivities(tmpProcess, process.getActivityList());
                        checkProcessProperties(tmpProcess, process.getProcessProperty());
                    }
                }

            }
        }
    }

    private void checkActivities(BwProcess process, List<Profile.Process.Activities> activityList) {
        if (process != null && activityList != null) {
            for (BwActivity act : process.getFullActivityList()) {
                if (act != null) {
                    String type = act.getType();
                    String pattern = getPattern(type, activityList);
                    if (pattern != null && !pattern.isEmpty()) {
                        Pattern pat = Pattern.compile(pattern);
                        Matcher matcher = pat.matcher(act.getName());
                        if (matcher != null && !matcher.matches()) {
                            LOG.warn("Activity name not matching the pattern: " + act.getName());
                            addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_ACTIVITY_TEXT_ISSUE) + act.getName(),source);
                        }
                    }
                }
            }

        }

    }

    private String getPattern(String type, List<Profile.Process.Activities> activityList) {
        if (activityList != null && type != null) {
            for (Profile.Process.Activities activity : activityList) {
                if (type.equals(activity.getType())) {
                    return activity.getNamingPattern();
                }
            }
        }
        return null;
    }

    private Profile loadProfile() {
        return profileManager.loadProfiles(profileContent);
    }


    private void checkDescriptors(BwProject project, Profile.Descriptors descriptors) {
        if (project != null && descriptors != null) {
            String pattern = descriptors.getNamingPattern();
            LOG.debug("Using global variable pattern: " + pattern);
            Pattern pat = Pattern.compile(pattern);
            String locationPattern = descriptors.getLocationPattern();
            LOG.debug("Using global variable pattern: " + locationPattern);
            Pattern patLocal = Pattern.compile(locationPattern);
            Collection<BwXmlResource> gvarList = project.getDescriptors();
            if (gvarList != null) {
                LOG.debug("Global variable to analyze: " + gvarList.size());
                for (BwXmlResource gVar : gvarList) {
                    String name = gVar.getFile().getName();
                    LOG.debug("Global variable key: " + name);
                    Matcher mat = pat.matcher(name);
                    if (mat != null && !mat.matches()) {
                        LOG.warn("Descriptor name not matching the pattern: " + name);
                        addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_DESCRIPTOR_VARIABLE_TEXT_ISSUE) + name,source);
                    }
                    String path = gVar.getFile().getName();
                    mat = patLocal.matcher(path);
                    if (mat != null && !mat.matches()) {
                        LOG.warn("Descriptor location not location the pattern: " + name);
                        addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_LOCATION_DESCRIPTOR_VARIABLE_TEXT_ISSUE) + name,source);
                    }
                }
            }
        }
    }

    private void checkProcessProperties(BwProcess tmpProcess, Profile.Process.ProcessProperty processProperty) {
        if(tmpProcess != null && processProperty != null){
            String pattern = processProperty.getNamingPattern();
            Pattern pat = Pattern.compile(pattern);
            for(BwVariable var : tmpProcess.getVariables()){
                String name = var.getName();
                Matcher mat = pat.matcher(name);
                if (mat != null && !mat.matches()) {
                    LOG.warn("Process propertie is not matching the pattern: " + name);
                    addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_PROCESS_PROPERTY_VARIABLE_TEXT_ISSUE) + name,source);
                }
            }
        }
    }

    private void checkSchemas(BwProject project, Profile.Schemas schemas) {
        if (project != null && schemas != null) {
            String pattern = schemas.getNamingPattern();
            LOG.debug("Using global variable pattern: " + pattern);
            String locationPattern = schemas.getLocationPattern();
            Pattern pat = Pattern.compile(pattern);
            Pattern patLocal = Pattern.compile(locationPattern);
            Collection<BwXmlResource> gvarList = project.getSchemas();
            if (gvarList != null) {
                LOG.debug("Global variable to analyze: " + gvarList.size());
                for (BwXmlResource gVar : gvarList) {
                    String name = gVar.getFile().getName();
                    LOG.debug("Global variable key: " + name);
                    Matcher mat = pat.matcher(name);
                    if (mat != null && !mat.matches()) {
                        LOG.warn("Schemas name not matching the pattern: " + name);
                        addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_CONVENTION_SCHEMAS_VARIABLE_TEXT_ISSUE) + name,source);
                    }
                    String path = gVar.getFile().getName();
                    mat = patLocal.matcher(path);
                    if (mat != null && !mat.matches()) {
                        LOG.warn("Schemas location not matching the pattern: " + name);
                        addError(1, l10n.format(LocalizationMessages.SONAR_BW_PROJECT_PROFILE_LOCATION_SCHEMAS_VARIABLE_TEXT_ISSUE) + name,source);
                    }
                }
            }
        }
    }

    

}
